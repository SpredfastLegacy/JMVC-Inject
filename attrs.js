// Generated by CoffeeScript 1.3.3
(function() {
  var getAttrs, has, setup,
    __slice = [].slice;

  setup = function(support) {
    var exports, injectConstructor;
    exports = Inject;
    injectConstructor = function(_super, index, getConfig) {
      return function() {
        var args, config, dep, deps, key, keys, target;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        config = getConfig(this, support, args);
        target = args[index];
        keys = (function() {
          var _results;
          _results = [];
          for (key in config) {
            dep = config[key];
            _results.push(key);
          }
          return _results;
        })();
        deps = (function() {
          var _results;
          _results = [];
          for (key in config) {
            dep = config[key];
            _results.push(dep);
          }
          return _results;
        })();
        return Inject.require.apply(this, deps.concat(function() {
          var i, value, values, _i, _len;
          values = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          for (i = _i = 0, _len = values.length; _i < _len; i = ++_i) {
            value = values[i];
            key = keys[i];
            if (!has.call(target, key)) {
              target[key] = value;
            }
          }
          return _super.apply(this, args);
        })).call(this);
      };
    };
    exports.setup = function() {
      return Inject.setup.arg().apply(this, arguments);
    };
    return exports.setup.arg = function(index, getConfig) {
      if (index == null) {
        index = 0;
      }
      if (getConfig == null) {
        getConfig = getAttrs;
      }
      return function() {
        return this.newInstance = injectConstructor(this.newInstance, index, getConfig);
      };
    };
  };

  getAttrs = function(Class, support) {
    var _ref;
    return (_ref = support.definition(Class.fullName).attrs) != null ? _ref : {};
  };

  has = Object.prototype.hasOwnProperty;

  (steal.plugins ? steal('inject-core.js') : steal('./inject-core.js')).then(function() {
    return Inject.plugin({
      init: setup
    });
  });

}).call(this);
